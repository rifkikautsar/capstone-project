# -*- coding: utf-8 -*-
"""MODEL KULITKU

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rBNBbmSo7UnzBpzOdp2ji9D5aVXKuTt6

#Importing libraries, modules
"""

import os
import zipfile
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras import layers
from tensorflow.keras import Model
from tensorflow.keras.optimizers import RMSprop
from tensorflow.keras.models import Sequential
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.preprocessing.image import img_to_array, load_img

"""#Mount access to Drive"""

from google.colab import drive
drive.mount('/content/drive')

#seed split data

sid=223
data_dirtrain='/content/drive/MyDrive/Kulitku Final/Train'
data_dirtest='/content/drive/MyDrive/Kulitku Final/Test'
data_dirvalid='/content/drive/MyDrive/Kulitku Final/Valid'

"""#Data Splitting to Training"""

img_height,img_width=180,180
batch_size=32
train_ds = tf.keras.preprocessing.image_dataset_from_directory(
  data_dirtrain,
  # shuffle=True,
  seed=sid,
  image_size=(img_height, img_width),
  batch_size=batch_size)

"""#Data Splitting to Validation"""

#split data ke validating
val_ds = tf.keras.preprocessing.image_dataset_from_directory(
  data_dirtest,
  # shuffle=True,
  seed=sid,
  image_size=(img_height, img_width),
  batch_size=batch_size)

"""#Defining Class Name"""

classnames = train_ds.class_names
print(classnames,"\n",len(classnames))

"""#Showing The Dataset Image"""

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 10))
for images, labels in train_ds.take(1):
  for i in range(9):
    ax = plt.subplot(3, 3, i + 1)
    plt.imshow(images[i].numpy().astype("uint8"))
    plt.title(classnames[labels[i]])
    plt.axis("off")

"""#Pre-Trained Model"""

from tensorflow.keras import regularizers
resnet_model = ''
resnet_model = Sequential()

pretrained_model= tf.keras.applications.ResNet50(include_top=False,
                   input_shape=(180,180,3),
                   pooling='avg',classes=4,
                   weights='imagenet')
for layer in pretrained_model.layers:
        layer.trainable=False

resnet_model.add(pretrained_model)

#sama kaya diatas cuma dipisah MODELLLL

resnet_model.add(Flatten())
resnet_model.add(Dense(512, activation='relu'))
resnet_model.add(Dropout(0.3))
resnet_model.add(Dense(512, activation='relu'))
resnet_model.add(Dropout(0.3))
resnet_model.add(Dense(4, activation='softmax'))

resnet_model.summary()

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.99):
      print("\nReached 99% accuracy so cancelling training!")
      self.model.stop_training = True

"""#Training The Model"""

resnet_model.compile(optimizer=Adam(learning_rate=0.01),loss='SparseCategoricalCrossentropy',metrics=['accuracy'])
callbacks = myCallback()
history = resnet_model.fit(train_ds, validation_data=val_ds, epochs=15,callbacks=callbacks)

"""#Model Evaluation"""

fig1 = plt.gcf()
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.axis(ymin=0.1,ymax=1)
plt.grid()
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epochs')
plt.legend(['train', 'validation'])
plt.show()

persenhasil,total=0,0

"""#Checking image quality"""

#buat tes satu image sampai bawah
import cv2
dircheck=data_dirtrain

from PIL import Image
import os, random
i=0
for classes in os.listdir(dircheck):
  persenhasil,total=0,0
  for i in range(200):
    pathcoba      = os.path.join(dircheck,classes)
    asalimg       = random.choice(os.listdir(pathcoba))
    asal_pilih    = os.path.join(pathcoba,asalimg)
    img           = cv2.imread(asal_pilih)
    image_resized = cv2.resize(img,(img_height,img_width))
    img           = np.expand_dims(image_resized,axis=0)
    pred          = resnet_model.predict(img)
    output_class  = classnames[np.argmax(pred)]
    if (i%50==0):
      print("image "+ str(i)+" ",asalimg,"The predicted class for",classes," is",output_class + " and it is",output_class==classes)

    if(output_class==classes):
      persenhasil+=1
      total+=1
    else :
      total+=1
  print('\033[1m'+"persentase total",classes, (persenhasil/total)*100,"%"+'\033[0m')

"""#Importing Model"""

resnet_model.save('./model with melasma paling baru terverifikasi.h5', save_format='h5')
# loading the saved model

!mkdir -p saved_model
resnet_model.save('saved_model/model with melasma paling baru terverifikasi')

import shutil
dir_to_zip = '/content/saved_model/model with melasma paling baru terverifikasi'
output_filename = 'model with melasma mantap'
shutil.make_archive(output_filename, 'zip', dir_to_zip)